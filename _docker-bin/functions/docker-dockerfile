# docker-dockerfile

# Docker file get
dockerfile-get-path() {
  local _buildpath="${1:-}"; shift
  local _build_dir=""
  local _buildfile=""
  [ -z "${_buildpath}" ] &&
  _buildpath="$(pwd)/Dockerfile" || :
  if [[ "${_buildpath}" =~ ^http(s:|:)// ]]
  then
    [[ "${_buildpath}" =~ .*/$ ]] && {
      _buildpath="${_buildpath}Dockerfile"
    } || :
  else
    [ -d "${_buildpath}" ] &&
    _buildpath="${_buildpath}/Dockerfile" || :
    [ "${_buildpath}" = "${_buildpath##*/}" ] &&
    _buildpath="$(pwd)/${_buildpath}" || :
    [ -d "${_buildpath%/*}" ] &&
    _buildpath=$(cd "${_buildpath%/*}" 2>/dev/null; pwd)"/${_buildpath##*/}" || :
  fi
  [ -n "${_buildpath}" ] &&
  echo "${_buildpath}"
  return $?
}

dockerfile-cat() {
  local _buildpath=""
  local _line_data=""
  [ $# -gt 0  ] &&
  _buildpath=$(dockerfile-get-path "${1:-}" 2>/dev/null) && shift || :
  if [ -n "${_buildpath}" ]
  then cat "${_buildpath}"
  else cat
  fi |
  while IFS= read _line_data
  do
    case "${_line_data}" in
    *\\) print "%s" "${_line_data%\\}";;
    *)   echo "${_line_data}" ;;
    esac
  done
  return $?
}

dockerfile-cat-FROM() {
  dockerfile-cat "${@}" |
  egrep -i '^[[:space:]]*FROM[[:space:]]+' |
  ${SED} -re 's/#.*$//g' |
  ${AWK} '{print(NR-1,(($4=="")?"-":$4),$2);}'
  return $?
}

# number of stage
dockerfile-num-of-stage() {
  local _buildpath=$(dockerfile-get-path "${1:-}" 2>/dev/null); shift
  local _stage_num=$(dockerfile-stage-list "${_buildpath}"|wc -l 2>/dev/null)
  echo ${_stage_num:-0}
  return 0
}

# multi-stage dockerfile
dockerfile-multi-stage() {
  local _stage_num=$(dockerfile-num-of-stage "${1:-}" 2>/dev/null)
  [ ${_stage_num:-0} -gt 1 ]
  return $?
}

# list stage
dockerfile-stage-list() {
  local _buildpath=""
  local _formatted=0
  local _withimage=0
  local _imagepath=""
  local _cimagetmp=""
  local _stage_ind=0
  local _stagename=""
  local _in_record=""
  local _prtformat="%s %s %s"
  local _colwidth2=20
  local _colwidth3=20
  eval $(getoptions "F|format=_formatted I|image=_withimage" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
cat <<_EOD_ 1>&2
Usage: ${FUNCNAME} [-IF] [/path/to/Dockerfile]
_EOD_
      return 2
      ;;
    *)
      [ -z "${_buildpath}" ] && {
        _buildpath="${_getopt_V}"
      } || :
      ;;
    esac
  done
  eval $(getoptions_end)
  _buildpath="$(dockerfile-get-path ${_buildpath} 2>/dev/null)"
  [ -f "${_buildpath}" -a -r "${_buildpath}" ] || {
    return 1
  }
  if [ ${_withimage} -eq 0 ]
  then
    _imagepath=""
  else
    _imagepath=$(
      dockerfile-env_IMAGEPATH "${_buildpath}" ||
      dockerfile-imagepath-from-dir "${_buildpath}" ||
      :; )
  fi 2>/dev/null
  if [ ${_formatted} -eq 0 -a ${_withimage} -ne 0 ]
  then
    _prtformat="%s %s %s %s"
  elif [ ${_formatted} -ne 0 ]
  then
    eval $(
      : && {
      eval $(dockerfile-build-opts-apply "${_buildpath}")
      while read _in_record
      do
        _colwidth2=$(
          eval "echo ${_in_record}" |
          __adjustcolwidth "${_colwidth2}" 2 )
        _colwidth3=$(
          eval "echo ${_in_record}" |
          __adjustcolwidth "${_colwidth3}" 3 )
      done < <(dockerfile-cat-FROM "${_buildpath}")
      printf "_colwidth2=%s;" "${_colwidth2}"
      printf "_colwidth3=%s;" "${_colwidth3}"
      }; )
    if [ ${_withimage} -eq 0 ]
    then
      _prtformat="%3s %-${_colwidth2}s%s"
      printf "${_prtformat}" "IDX" "As" "From"
    else
      _prtformat="%3s %-${_colwidth2}s%-${_colwidth3}s%s"
      printf "${_prtformat}" "IDX" "As" "From" "Image"
    fi; echo
  fi
  ( : && {
    eval $(dockerfile-build-opts-apply "${_buildpath}")
    while read _in_record
    do
      _cimagetmp=""
      [ -z "${_imagepath}" ] || {
        eval $(
          echo "${_in_record}" |${AWK} \
          '{printf("_stage_ind=%s;_stagename=%s;",$1,$2);}')
        _cimagetmp=$(
          dockerfile-imagepath-echo \
          "${_imagepath}" "${_stage_ind}" "${_stagename}" \
          2>/dev/null)
      }
      eval "echo ${_in_record}${_cimagetmp:+ ${_cimagetmp}}"
    done < <(dockerfile-cat-FROM "${_buildpath}")
  }; )|
  if [ ${_withimage} -eq 0 ]
  then ${AWK} '{print(sprintf("'"${_prtformat}"'",$1,$2,$3));}'
  else ${AWK} '{print(sprintf("'"${_prtformat}"'",$1,$2,$3,$4));}'
  fi 2>/dev/null
  return $?
}

# Apply build-args
dockerfile-build-opts-apply() {
  local _buildpath="$(dockerfile-get-path ${1:-} 2>/dev/null)"
  local _buildopts=""
  [ -f "${_buildpath}" -a -r "${_buildpath}" ] && {
    cat "${_buildpath}" |dockerfile-cat |${SED} -nre \
    's/^[[:space:]]*ARG[[:space:]]+([^=]+=.*)$/\1;/gip'
    dockerfile-env_BUILDOPTS "${_buildpath}" |${SED} -nre \
    's/([^=]+[[:space:]])([_0-9A-Za-z]+=([^[:space:]]+|'"'[^']+'|''"'|""))/\2;/gp'
  } 2>/dev/null
  return $?
}

# Apply build-args
dockerfile-build-opts-unset() {
  local _buildpath="$(dockerfile-get-path ${1:-} 2>/dev/null)"
  local _buildopts=""
  [ -f "${_buildpath}" -a -r "${_buildpath}" ] && {
    cat "${_buildpath}" |dockerfile-cat |${SED} -nre \
    's/^[[:space:]]*ARG[[:space:]]+([^=]+)=.*$/unset \1;/gip'
    dockerfile-env_BUILDOPTS "${_buildpath}" |${SED} -re \
    's/([^=]+[[:space:]])([_0-9A-Za-z]+)=([^[:space:]]+|'"'[^']+'|''"'|"")/unset \2;/g'
  } 2>/dev/null
  return $?
}

# Get stage name
dockerfile-stage-get() {
  local _indorname="${1:-}"; shift
  local _stage_key="${1:-}"; shift
  local _buildpath=$(dockerfile-get-path "${1:-}" 2>/dev/null); shift
  case "${_indorname}" in
  ind|index)
    _indorname='{print($1);}'
    ;;
  name)
    _indorname='{print($2);}'
    ;;
  *)
    return 2
    ;;
  esac
  [ -n "${_stage_key}" ] && {
    case "${_stage_key}" in
    +[0-9]*)
      _stage_key="${_stage_key#*+}"
      ;;
    @[0-9A-Za-z]*)
      _stage_key="${_stage_key#*@}"
      ;;
    esac
    dockerfile-stage-list "${_buildpath}" |${AWK} \
    '$1=="'"${_stage_key}"'" || $2=="'"${_stage_key}"'" '"${_indorname};"
  }
  return $?
}

# Get stage index
dockerfile-stage-get-index() {
  dockerfile-stage-get index "${@}"
  return $?
}

# Get stage name
dockerfile-stage-get-name() {
  dockerfile-stage-get name "${@}"
  return $?
}

# Exists stage index
dockerfile-stage-has-index() {
  local _stage_ind=$(dockerfile-stage-get index "${@}") || :
  [ -n "${_stage_ind}" ]
  return $?
}

# Exists stage name
dockerfile-stage-has-name() {
  local _stagename=$(dockerfile-stage-get name "${@}") || :
  [ -n "${_stagename}" ]
  return $?
}

# Get stage name by index
dockerfile-imagepath-get() {
  local _stage_ind=""
  local _stagename=""
  local _imagepath=""
  local _stage_key="${1:-}"; shift
  local _buildpath=$(dockerfile-get-path "${1:-}" 2>/dev/null); shift
  local _multi_stg=0
  [ -z "${_imagepath}" ] &&
  _imagepath=$(dockerfile-env_IMAGEPATH "${_buildpath}") || :
  [ -z "${_imagepath}" ] &&
  _imagepath=$(dockerfile-imagepath-from-dir "${_buildpath}") || :
  [ -z "${_imagepath}" ] && {
    return 1
  } || :
  dockerfile-multi-stage "${_buildpath}" 1>/dev/null 2>&1 && {
    _multi_stg=1
  } || :
  [ ${_multi_stg} -eq 0 ] && {
    _stage_key="+0"
  } || :
  case "${_stage_key}" in
  +[0-9]*)
    _stage_ind="${_stage_key##*+}"
    dockerfile-stage-has-index "${_stage_ind}" "${_buildpath}" 1>/dev/null 2>&1 && {
      _stagename=$(
        dockerfile-stage-get-name "${_stage_ind}" "${_buildpath}" 2>/dev/null)
    } || return 2
    ;;
  @[0-9A-Za-z]*)
    _stagename="${_stage_key##*@}"
    _stage_ind=$(
      dockerfile-stage-get-index "${_stagename}" "${_buildpath}" 2>/dev/null)
    [ $? -eq 0 -a -n "${_stage_ind}" ] ||
    return 2
    ;;
  *)
    _stage_ind=""
    _stagename=""
    ;;
  esac
  if [ -z "${_stage_ind}${_stagename}" ]
  then
    _stage_key=$(
      dockerfile-stage-list "${_buildpath}" |
      awk '{print($1);}' 2>/dev/null)
  else
    _stage_key="${_stage_ind}"
  fi
  [ -n "${_stage_key}" ] &&
  for _stage_ind in ${_stage_key}
  do
    _stagename=$(dockerfile-stage-get-name "${_stage_ind}" "${_buildpath}" 2>/dev/null)
    dockerfile-imagepath-echo "${_imagepath}" "${_stage_ind}" "${_stagename}"
  done
  return $?
}

dockerfile-imagepath-from-dir() {
  local _buildpath=$(dockerfile-get-path "${1:-}" 2>/dev/null); shift
  local _build_dir=""
  local _imagepath=""
  local _imagepart=""
  local _imagerepo=""
  local _image_tag=""
  if [[ "${_buildpath}" =~ ^http(s:|:)//[^/]+/(.+)$ ]]
  then _build_dir="${BASH_REMATCH[2]%/*}"
  elif [[ "${_buildpath}" =~ ^(${DOCKERFILES_ROOT_DIR})/(.+)$ ]]
  then _build_dir="${BASH_REMATCH[2]%/*}"
  else return 2
  fi &&
  [ -n "${_build_dir:-}" ] &&
  for _imagepart in $(echo ${_build_dir//\// })
  do
    [[ "${_imagepart}" =~ ^_.*_$ ]] || {
      _imagerepo="${_imagerepo:+${_imagerepo}-}${_imagepart}"
    } || :
  done &&
  [ -n "${_imagerepo:-}" ] && {
    _imagerepo="${_imagerepo//[/+#%&@]/-}"
    _imagerepo="${_imagerepo//[.:=]/_}"
    _imagerepo="${_imagerepo// }"
    _image_tag="${_image_tag//[/+#%&@]/-}"
    _image_tag="${_image_tag//[.:=]/_}"
    _image_tag="${_image_tag// }"
  } &&
  [ -n "${_imagerepo:-}" ] && {
    echo "${_imagerepo}${_image_tag:+:${_image_tag}}"
  }
  return $?
}

dockerfile-imagepath-echo() {
  local _imagepath="${1:-}"; shift
  local _stage_ind="${1:-}"; shift
  local _stagename="${1:-}"; shift
  [ -n "${_imagepath}" -a \
    -n "${_stage_ind}${_stagename}" ] && {
    [ "${_stagename}" = "-" ] && {
      _stagename=""
    }
    case "${_imagepath}" in
    [-_0-9A-Za-z]*:[-_0-9A-Za-z]*)
      if [ -n "${_stagename}" ]
      then echo "${_imagepath}${_stagename:+_${_stagename}}"
    # else echo "${_imagepath}${_stage_ind:+_${_stage_ind}}"
      else echo "${_imagepath}"
      fi
      ;;
    [-_0-9A-Za-z]*)
      if [ -n "${_stagename}" ]
      then echo "${_imagepath}${_stagename:+:${_stagename}}"
    # else echo "${_imagepath}${_stage_ind:+:${_stage_ind}}"
      else echo "${_imagepath}"
      fi
      ;;
    *)
      ;;
    esac
  }
  return $?
}

# docker attributes get
dockerfile-attributes-get() {
  local _buildpath=""
  local _exportflg=0
  local _dvariable=""
  eval $(getoptions "E|export=_exportflg" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
      echo "${FUNCNAME}: ERROR: Illegal options '${_getopt_V}'". 1>&2
      return 2
      ;;
    *)
      [ -z "${_buildpath}" ] && {
        _buildpath="${_getopt_V}"
      } || :
      ;;
    esac
  done
  eval $(getoptions_end)
  _buildpath=$(dockerfile-get-path "${_buildpath}")
  [ -r "${_buildpath}" ] && {
    cat "${_buildpath}" |
    ${SED} -ne \
    's;^#[[:space:]]*@[[:space:]]*\([_A-Za-z][_0-9A-Za-z]*\)[[:space:]]*=[[:space:]]*\(.*\)[[:space:]]*$;\1=\2;gp' |
    while read _dvariable
    do
      [ -z "${_dvariable}" ] || {
        [ ${_exportflg} -ne 0 ] &&
        echo "export ${_dvariable};" ||
        echo "${_dvariable};"
      }
    done
  } #2>/dev/null
  return $?
}

# dockerfile get env
dockerfile-env-get() {
  local _cattr_key="${1:-}"; shift
  local _buildpath=$(dockerfile-get-path "${1:-}"); shift
  local _cattr_val=""
  [ -f "${_buildpath}" -a -r "${_buildpath}" ] && {
    if [ -z "${_cattr_key}" ]
    then dockerfile-attributes-get "${_buildpath}"
    else
      case "${_cattr_key}" in
      DOCKER_*)
        ;;
      *)
        _cattr_key="DOCKER_${_cattr_key}"
        ;;
      esac
      _cattr_val=$(eval $(
        dockerfile-attributes-get "${_buildpath}" |
        egrep '^'"${_cattr_key}"'=.*' 2>/dev/null &&
        echo 'echo $'"${_cattr_key}") )
      [ -z "${_cattr_val}" ] &&
      _cattr_val=$(eval $(
        dockerfile-attributes-get "${_buildpath}" |
        egrep '^'"${_cattr_key#DOCKER_}"'=.*' 2>/dev/null &&
        echo 'echo $'"${_cattr_key#DOCKER_}") )
      [ -n "${_cattr_val}" ] &&
      echo "${_cattr_val}"
    fi 2>/dev/null
  }
  return $?
}

dockerfile-env_CONTAINER() {
  dockerfile-env-get DOCKER_CONTAINER "${@}"
  return $?
}

dockerfile-env_IMAGEPATH() {
  local _imgname=$(dockerfile-env-get DOCKER_IMAGEPATH "${@}")
  local _imgrepo=$(echo "${_imgname}" |${AWK} -F: '{print($1);}')
  local _img_tag=$(echo "${_imgname}" |${AWK} -F: '{print($2);}')
  [ -n "${_imgrepo}${_img_tag}" ] &&
  echo "${_imgrepo}${_img_tag:+:${_img_tag}}"
  return $?
}

dockerfile-env_IMAGEREPO() {
  dockerfile-env_IMAGEPATH "${@}" |
  ${AWK} -F: '{print($1);}' 2>/dev/null
  return $?
}

dockerfile-env_IMAGE_TAG() {
  dockerfile-env_IMAGEPATH "${@}" |
  ${AWK} -F: '{print($2);}' 2>/dev/null
  return $?
}

dockerfile-env_BUILDOPTS() {
  __load_external_env "${1:-}" "BUILDOPTS" "build"
  return $?
}

dockerfile-env_BOOT_OPTS() {
  __load_external_env "${1:-}" "BOOT_OPTS" "run"
  return $?
}

dockerfile-env_EXEC_OPTS() {
  __load_external_env "${1:-}" "EXEC_OPTS" "exec"
  return $?
}

__load_external_env() {
  local _buildpath="${1:-}"; shift
  local _opts_name="${1:-}"; shift
  local _opts_suff="${1:-}"; shift
  local _file_suff=""
  local _opt_value=""
  local _eval_expr=""
  local _tmp_value=""
  _buildpath=$(dockerfile-get-path "${_buildpath}")
  [ -n "${_opts_name}" ] && {
    _opt_value=$(dockerfile-env-get "${_opts_name}" "${_buildpath}")
  } || :
  for _file_suff in \
  "${_opts_name}" \
  "${_opts_name:+opts.${_opts_name}}" "${_opts_suff:+opts.${_opts_suff}}"
  do
    [ -n "${_file_suff}" -a \
      -f "${_buildpath}.${_file_suff}" -a \
      -r "${_buildpath}.${_file_suff}" ] && {
      _tmp_value=$(echo $(cat "${_buildpath}.${_file_suff}" 2>/dev/null))
      [ -n "${_tmp_value}" ] &&
      _opt_value="${_opt_value:+${_opt_value} }${_tmp_value}"
    } || :
  done
  [ -n "${_opts_name}" -a \
    -f "${_buildpath}.opts" -a \
    -r "${_buildpath}.opts" ] && {
    _eval_expr=". \"${_buildpath}.opts\" 2>/dev/null && "
    _eval_expr="${_eval_expr}"'echo "${DOCKER_'"${_opts_name}"':-}";'
    _tmp_value=$(eval ${_eval_expr})
    [ -n "${_tmp_value}" ] &&
    _opt_value="${_opt_value:+${_opt_value} }${_tmp_value}"
  } || :
  [ -n "${_opt_value}" ] &&
  echo "${_opt_value}"
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
