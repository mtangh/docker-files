# docker-dockerfile

# Dockerfile get
dockerfile-get-path() {
  local _buildpath="${1:-}"; shift
  if [ -z "${_buildpath}" ]
  then
    _buildpath="$(pwd)/Dockerfile" || :
  else
    _buildpath=( $(echo "${_buildpath}") )
    _buildpath="${_buildpath[0]}"
  fi
  [ -d "${_buildpath}" ] &&
  _buildpath="${_buildpath}/Dockerfile" || :
  [ "${_buildpath}" = "${_buildpath##*/}" ] &&
  _buildpath="$(pwd)/${_buildpath}" || :
  [ -d "${_buildpath%/*}" ] &&
  _buildpath=$(cd "${_buildpath%/*}" 2>/dev/null; pwd)"/${_buildpath##*/}" || :
  [ -n "${_buildpath}" ] &&
  [ -f "${_buildpath:-X}" -a -r "${_buildpath:-X}" ] &&
  echo "${_buildpath}"
  return $?
}

dockerfile-cat() {
  local _buildpath=""
  local _line_data=""
  [ $# -gt 0  ] &&
  _buildpath=$(dockerfile-get-path "${1:-}") &&
  shift || :
  if [ -n "${_buildpath}" ]
  then cat -u "${_buildpath}"
  else cat -u -
  fi |
  while IFS= read _line_data
  do
    [ -n "${_line_data}" ] ||
      continue
    echo $(
      if [[ "${_line_data:-}" =~ \\$ ]]
      then print "%s" "${_line_data%\\}"
      else echo "${_line_data}"
      fi; )
  done
  return $?
}

dockerfile-cat-FROM() {
  dockerfile-cat "$@" |
  egrep -i '^[[:space:]]*(FROM|#@&)[[:space:]]+' |
  ${SED} -r -e 's/^[[:space:]]+//gi' -e 's/[[:space:]]+$//gi' |
  ${SED} -re 's/^((FROM[^#]+|#@&.+)[^[:space:]])([[:space:]]*#.*$|$)/\1/gi' |
  ${AWK} -f <( : && {
cat - <<-'_EOF_'
BEGIN{ sn="-"; ti=""; pl="-"; an=""; };
$0 ~ /^#@&/ {
  an = gensub(/^#@&[[:space:]]+([^[:space:]]+).+$/,"\\1",1,$0);
}
toupper($0) - /^FROM/ {
  if( match(toupper($0),/[[:space:]]+AS[[:space:]]+/) ) {
    ti = gensub(/^.+[[:space:]]+([^[:space:]]+)[[:space:]]+[Aa][Ss][[:space:]].+$/,"\\1",1,$0);
    sn = gensub(/^.+[[:space:]]+[Aa][Ss][[:space:]]+([^[:space:]]+)[[:space:]]*$/,"\\1",1,$0);
  } else {
    ti = gensub(/^.+[[:space:]]+([^[:space:]]+)[[:space:]]*$/,"\\1",1,$0);
  }
};
tolower($0) ~ /--platform=/ {
  pl = gensub(/^.+--platform=([^[:space:]]*).*$/,"\\1",1,$0);
};
sn != "" && ti != "" {
  print(NR-1,sn,ti,pl,an);
  sn="";ti="-";pl="-";an="";
};
_EOF_
  }; )
  return $?
}

dockerfile-cat-ATTRIBUTES() {
  local _buildpath="${1:-}"
  local _dvariable=""
  _buildpath=$(dockerfile-get-path "${_buildpath}") ||
    return 1
  dockerfile-cat "${_buildpath}" |egrep '^[[:space:]]*#@[[:space:]]*' |
  ${SED} -r -e 's/^[[:space:]]*#@[[:space:]]+//gi' -e 's/[[:space:]]+$//gi' |${SED} -ne \
  's;^\([_A-Za-z][_0-9A-Za-z]*\)[[:space:]]*=[[:space:]]*\([^[:space:]]*.*\)[[:space:]]*$;\1=\2;gp' |
  ${SED} -re 's/$/;/g' |${SED} -re 's/=;$/=''""''/g' 2>/dev/null
  return $?
}

dockerfile-cat-ARG() {
  dockerfile-cat "$@" |
  egrep -i '^[[:space:]]*(ARG)[[:space:]]+' |
  ${SED} -r -e 's/^[[:space:]]+//gi' -e 's/[[:space:]]+$//gi' |${SED} -nre \
  's/^ARG[[:space:]]+([^=[:space:]]+)(=)([^=[:space:]].*$|$)/\1=\3;/gip' |
  ${SED} -re 's/=;$/=''""''/g' 2>/dev/null
  return $?
}

dockerfile-cat-ENV() {
  dockerfile-cat "$@" |
  egrep -i '^[[:space:]]*(ENV)[[:space:]]+' |
  ${SED} -r -e 's/^[[:space:]]+//gi' -e 's/[[:space:]]+$//gi' |${SED} -nre \
  's/^ENV[[:space:]]+([^=[:space:]]+)(=)([^=[:space:]].*$|$)/\1=\3;/gip' \
  2>/dev/null
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
