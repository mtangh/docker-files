# container-image

# container image id
container-image-get-id() {
  container-image-get id "$@"
  return $?
}

# container image tag
container-image-get-tag() {
  container-image-get tag "$@"
  return $?
}

# get container image id or tag
container-image-get() {
  local _cimg_type="${1:-}"; shift
  local _cimg_fcls=""
  local _cimg_keys=""
  local _cimagekey=""
  local _found_cnt=0
  local _found_val=""
  local _buildpath=""
  case "${_cimg_type}" in
  id)  _cimg_fcls='{print($1);}' ;;
  tag) _cimg_fcls='{print($2);}' ;;
  *)
    echo "Usage: $FUNCNAME {tag|id} [-f dockerfile-path] [IMAGE ...]" 1>&2
    return 2
    ;;
  esac
  eval $(getoptions "f|:=_buildpath" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
      ;;
    *)
      _cimg_keys="${_cimg_keys+${_cimg_keys} }${_getopt_V}"
      ;;
    esac
  done
  eval $(getoptions_end)
  if [ -z "${_cimg_keys}" ]
  then
    _buildpath=$(dockerfile-get-path "${_buildpath:-}") &&
    [ -r "${_buildpath}" ] && {
      for _cimagekey in $(dockerfile-imagetag-get - "${_buildpath}")
      do
        [ -n "${_cimagekey}" ] && {
          _cimg_keys="${_cimg_keys:+${_cimg_keys} }${_cimagekey}"
        }
      done
      _cimagekey=""
    }
  fi 2>/dev/null || :
  [ -n "${_cimg_fcls}" ] &&
  for _cimagekey in ${_cimg_keys}
  do
    _found_val=""
    [ -n "${_cimagekey}" ] &&
    case "${_cimagekey}" in
    -*)
      ;;
    *)
      _found_val=$(
        docker images --format='{{ .ID}} {{ .Repository }}:{{ .Tag }}' |
        egrep '(^'"${_found_val}"'[ ]|[ ]'"${_found_val}"'$)' |
        ${AWK} ${_cimg_fcls}; 2>/dev/null )
      [ -n "${_found_val}" ] && {
        echo ${_found_val}
        _found_cnt=$(( ${_found_cnt} + 1 ))
      }
      ;;
    esac
  done &&
  [ ${_found_cnt} -gt 0 ]
  return $?
}

container-image-get-property() {
  local _prop_name=""
  local _dimagetag=""
  eval $(getoptions "f|:=_buildpath" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
      ;;
    *)
      if [ -z "${_prop_name}" ]
      then _prop_name="${_getopt_V}"
      elif [ -z "${_dimagetag}" ]
      then _dimagetag="${_getopt_V}"
      fi
      ;;
    esac
  done
  if [ -n "${_dimagetag}" ]
  then
    _dimagetag=$(
      container-image-get-tag \
      ${_buildpath:+-f ${_buildpath}} "{_dimagetag}")
  else
    _dimagetag=$(
      dockerfile-imagetag-get - "${_buildpath:-}"|
      tail -f -n 1)
  fi
  [ -n "${_prop_name}" -a -n "${_dimagetag}" ] && {
    docker inspect \
      --type image \
      --format='{{ index .Config.Labels "'"${_prop_name}"'" }}' \
      "${_dimagetag}"
  }
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
