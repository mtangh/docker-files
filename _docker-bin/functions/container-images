# container-image

# container image id
get-image-id() {
  _get-image id "$@"
  return $?
}

# container image tag
get-image-tag() {
  _get-image tag "$@"
  return $?
}

# get container image id or tag
_get-image() {
  local _images_out_type="$1"; shift
  local _images_find_cnt=0
  local _images_find_key=""
  local _images_keyfound=""
  local _images_fmt_spec=""
  local DOCKER_CONTAINER=""
  local DOCKER_IMAGE_TAG=""
  local DOCKER_BUILDOPTS=""
  if [ $# -le 0 ]
  then
    eval $(docker-container-env)
    [ -n "$DOCKER_IMAGE_TAG" ] && {
      case "$_images_out_type" in
      id)  _images_fmt_spec="{{ .ID }}" ;;
      tag) _images_fmt_spec="{{ .Repository }}:{{ .Tag }}" ;;
      esac
      docker images --format="$_images_fmt_spec" "${DOCKER_IMAGE_TAG}" &&
      _images_find_cnt=$(( $_images_find_cnt + 1 ))
    }
  else
    case "$_images_out_type" in
    id)  _images_fmt_spec='{print($1);}' ;;
    tag) _images_fmt_spec='{print($2);}' ;;
    esac
    for _images_find_key in $@
    do
      [ -n "$_images_find_key" ] &&
      case "$_images_find_key" in
      -*)
        ;;
      *)
        _images_keyfound=$(
          docker images --format='{{ .ID}} {{ .Repository }}:{{ .Tag }}' |
          grep -E '(^'"$_images_find_key"'[ ]|[ ]'"$_images_find_key"'$)' |
          awk $_images_fmt_spec )
        [ -n "$_images_keyfound" ] && {
          echo $_images_keyfound
          _images_find_cnt=$(( $_images_find_cnt + 1 ))
        }
        ;;
      esac
    done
  fi 2>/dev/null
  [ $_images_find_cnt -gt 0 ]
  return $?
}

get-image-property() {
  local _prop_name="$1"; shift
  local _dimagetag=$(get-image-tag "$1"); shift
  [ -n "$_prop_name" ] &&
  [ -n "$_dimagetag" ] && {
    docker inspect --type image --format='{{ index .Config.Labels "'"$_prop_name"'" }}' "$_dimagetag"
  }
  return $?
}

