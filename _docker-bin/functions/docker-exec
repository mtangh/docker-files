# docker-exec

# docker exec
docker-exec() {
  local _container=""
  local _imagepath=""
  local _imageuuid=""
  local _buildpath=""
  local _dcmd_opts=()
  local _cmnd_args=()
  local _opts_type=""
  local _endofopts=0
  eval $(getoptions "f|file:=_buildpath" "$@")
  while getoptions_has_next
  do
    [ ${_endofopts} -eq 0 ] &&
    _opts_type="e" ||
    _opts_type="c" || :
    eval $(getoptions_shift 2>/dev/null)
    case "${_getopt_V:=}" in
    --help)
cat <<_USAGE_
Usage: $FUNCNAME [OPTIONS] [CONTAINER] [--] COMMAND [ARG...]]
_USAGE_
      ${DOCKER_CMD} exec --help |egrep -v '^Usage' |tail -n +2
      echo
      return 0
      ;;
    --)
      [ ${_endofopts} -eq 0 ] && {
        _opts_type=""
        _endofopts=1
      } || :
      ;;
    -*)
      ;;
    +[0-9]*|@[0-9A-Za-z]*)
      [ ${_endofopts} -eq 0 ] && {
        _stage_key="${_getopt_V}"
        _opta_type=""
        _endofopts=1
      } || :
      ;;
    *)
      if [ ${_endofopts} -eq 0 -a -z "${_container}" ]
      then
        : && {
          _imageuuid=$(container-image-get-id "${_getopt_V}")
          [ -n "${_imageuuid}" ] &&
          _imagepath=$(container-image-get-path "${_imageuuid}") || :
          [ -n "${_imageuuid}${_imagepath}" ] &&
          _container=$(container-get-id-all "${_imagepath:-${_imageuuid}}") ||
          _container=$(container-get-id-all "${_getopt_V}")
        } 2>/dev/null || :
        [ -n "${_container}" ] && {
          _opts_type=""
          _endofopts=1
        } || :
      fi
      ;;
    esac
    case "${_opts_type:-}" in
    e)
      [ -n "${_dcmd_opts[@]}" ] &&
      _dcmd_opts=("${_dcmd_opts[@]}" "${_getopt_V}") ||
      _dcmd_opts=("${_getopt_V}") || :
      ;;
    c)
      [ -n "${_cmnd_args[@]}" ] &&
      _cmnd_args=("${_cmnd_args[@]}" "${_getopt_V}") ||
      _cmnd_args=("${_getopt_V}") || :
      ;;
    *)
      ;;
    esac
  done
  eval $(getoptions_end)
  [ -z "${_container}" ] && {
    _buildpath=$(dockerfile-get-path "${_buildpath:-}")
  } 2>/dev/null || :
  if [ -r "${_buildpath}" -a -z "${_container}" ]
  then
    [ -z "${_stage_key}" ] &&
    dockerfile-multi-stage "${_buildpath}" 1>/dev/null 2>&1 && {
      echo "Choose a stage to run."
      echo
      dockerfile-stage-list -FI "${_buildpath}" 2>/dev/null
      echo
      return 1
    } || :
    _imagepath=$(
      dockerfile-imagepath-get \
      "${_stage_key:-+0}" "${_buildpath}" 2>/dev/null)
    [ -n "${_imagepath}" ] && {
      _imageuuid=$(container-image-get-id "${_imagepath}") ||
      _imageuuid=""
      _container=$(container-get-id-all "${_imagepath}") ||
      _container=""
    } 2>/dev/null || :
  fi
  if [ -n "${_imagepath}" -a -z "${_container}" ]
  then _container=$(container-get-id-all "${_imagepath}")
  fi 2>/dev/null || :
  if [ -n "${_imageuuid}" -a -z "${_container}" ]
  then _container=$(container-get-id-all "${_imageuuid}")
  fi 2>/dev/null || :
  [ -z "${_container}" -o -z "$(echo ${_cmnd_args[@]})" ] && {
    ${DOCKER_CMD} exec --help
    echo
    return 1
  } || :
  if [ "$(echo $(echo "${_container}"|wc -l))" != "1" ]
  then
cat <<_EOD_
There are multiple instances of image '${_imagepath}'.
Check the instance to be executed with the '${DOCKER_CMD} ps'.

_EOD_
    return 1
  fi || :
  echo ${DOCKER_CMD} exec "${_dcmd_opts[@]}" ${_container} "${_cmnd_args[@]}"
  eval $(
  echo ${DOCKER_CMD} exec "${_dcmd_opts[@]}" ${_container} "${_cmnd_args[@]}")
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
