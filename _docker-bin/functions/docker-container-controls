# docker-container-controls

# docker control
__docker-control-command() {
  local _container=""
  local _imageuuid=""
  local _imagepath=""
  local _stagekeys=()
  local _stage_key=""
  local _ctrl_cmnd="${1:-}"; shift
  local _ctrl_args=()
  local _ctrl_opts=()
  local _endofopts=0
  __docker_is_running || return 111
  [ -n "${_ctrl_cmnd}" ] || {
    echo "${FUNCNAME}: sub-command not specified." 1>&2
    return 1
  }
  eval $(getoptions "f|file:=_buildpath" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift 2>/dev/null)
    case "${_getopt_V:=}" in
    --help)
      __docker_help "${_ctrl_cmnd}" \
      "docker-${_ctrl_cmnd} [OPTIONS] [CONTAINER|IMAGE] ..." \
      "docker-${_ctrl_cmnd} [-f /path/to/Dockerfile] [+stage-index|@stage-name] ..."
      return 0
      ;;
    --)
      [ ${_endofopts} -eq 0 ] && {
        _endofopts=1
      } || :
      ;;
    -*)
      if [ ${_endofopts} -eq 0 ]
      then
        [ -n "$(echo ${_ctrl_opts[@]})" ] &&
        _ctrl_opts=("${_ctrl_opts[@]}" "${_getopt_V}") ||
        _ctrl_opts=("${_getopt_V}") || :
      else
        [ -n "$(echo ${_ctrl_args[@]})" ] &&
        _ctrl_args=("${_ctrl_args[@]}" "${_getopt_V}") ||
        _ctrl_args=("${_getopt_V}") || :
      fi
      ;;
    +[0-9]*|@[0-9A-Za-z]*)
      [ -n "$(echo ${_stagekeys[@]})" ] &&
      _stagekeys=("${_stagekeys[@]}" "${_getopt_V}") ||
      _stagekeys=("${_getopt_V}") || :
      _endofopts=1
      ;;
    *)
      _container=""
      _imageuuid=""
      _imagepath=""
      : && {
        _imageuuid=$(container-image-get-id "${_getopt_V}")
        [ -n "${_imageuuid}" ] &&
        _imagepath=$(container-image-get-path "${_imageuuid}") || :
        [ -n "${_imageuuid}${_imagepath}" ] &&
        _container=$(container-get-id-all "${_imagepath:-${_imageuuid}}") ||
        _container=$(container-get-id-all "${_getopt_V}")
        [ -n "${_container}" ] && {
          _getopt_V="${_container}"
          _endofopts=1
        }
      } 2>/dev/null || :
      if [ ${_endofopts} -eq 0 ]
      then
        [ -n "$(echo ${_ctrl_opts[@]})" ] &&
        _ctrl_opts=("${_ctrl_opts[@]}" "${_getopt_V}") ||
        _ctrl_opts=("${_getopt_V}") || :
      else
        [ -n "$(echo ${_ctrl_args[@]})" ] &&
        _ctrl_args=("${_ctrl_args[@]}" "${_getopt_V}") ||
        _ctrl_args=("${_getopt_V}") || :
      fi
      ;;
    esac
  done
  eval $(getoptions_end)
  [ -z "$(echo ${_ctrl_args[@]})" -o -n "$(echo ${_stagekeys[@]})" ] && {
    _buildpath=$(dockerfile-get-path "${_buildpath:-}")
  } 2>/dev/null || :
  if [ -z "$(echo ${_ctrl_args[@]})" -a -z "$(echo ${_stagekeys[@]})" ]
  then _stagekeys=("+0")
  fi
  if [ -n "${_stagekeys[@]}" ]
  then
    for _stage_key in "${_stagekeys[@]}"
    do
      _imagepath=$(
        dockerfile-imagepath-get \
        "${_stage_key:-+0}" "${_buildpath}" 2>/dev/null) ||
      _imagepath="" || :
      [ -n "${_imagepath}" ] &&
      _container=$(container-get-id-all "${_imagepath}") ||
      _container=""
      [ -n "${_container}" ] && {
        [ -n "$(echo ${_ctrl_args[@]})" ] &&
        _ctrl_args=("${_ctrl_args[@]}" "${_container}") ||
        _ctrl_args=("${_container}") || :
      } || :
    done
  fi
  [ -n "$(echo ${_ctrl_args[@]})" ] || {
    __docker_help "${_ctrl_cmnd}" \
    "docker-${_ctrl_cmnd} [OPTIONS] [CONTAINER|IMAGE] ..."
    return 1
  }
  echo ${DOCKER_CMD} "${_ctrl_cmnd}" "${_ctrl_opts[@]}" "${_ctrl_args[@]}" 1>&2
  eval $(
  echo ${DOCKER_CMD} "${_ctrl_cmnd}" "${_ctrl_opts[@]}" "${_ctrl_args[@]}"
  )
  return $?
}

docker-start() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-stop() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-restart() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-wait() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-pause() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-unpause() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-attach() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-rm() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-kill() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-import() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-export() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-update() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-stats() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-logs() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-top() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

docker-port() {
  __docker-control-command "${FUNCNAME#*docker-}" "$@"
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
