# docker-pull-and-push

# docker pull
docker-pull() {
  local _imagekeys=""
  local _image_key=""
  local _iplatform=""
  local _dpullopts=""
  local _dpullstat=0
  local _aloginout=0
  local _aloginopt=""
  __docker_is_running || return 111
  eval $(getoptions "|platform:=_iplatform" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    --help)
      __docker_help pull \
      "${FUNCNAME} [OPTIONS] NAME[:TAG|@DIGEST] ..."
      return 0
      ;;
    --)
      _endofopts=1
      ;;
    -*)
      [ ${_endofopts:-0} -eq 0 ] &&
      _dpullopts="${_dpullopts:+$_dpullopts }${_getopt_V:-}" || :
      [ ${_endofopts:-0} -eq 0 ] ||
      _imagekeys="${_imagekeys:+$_imagekeys }${_getopt_V:-}" || :
      ;;
    *)
      _imagekeys="${_imagekeys:+$_imagekeys }${_getopt_V:-}"
      _endofopts=1
      ;;
    esac
  done
  eval $(getoptions_end)
  : && {
    [ -n "${_iplatform:-}" ] && {
      _dpullopts="${_dpullopts:+$_dpullopts }--platform=${_iplatform:-}"
    } || :
    for _image_key in ${_imagekeys}
    do
      [ -n "${_image_key:-}" ] ||
        continue
      __docker_invoke pull ${_dpullopts} "${_image_key:-}" || {
        _dpullstat=$?
        break
      }
    done
  } || :
  return ${_dpullstat}
}

# docker push
docker-push() {
  local _buildpath=""
  local _pubimages=""
  local _imagekeys=""
  local _image_key=""
  local _imagename=""
  local _imagepath=""
  local _dpushopts=""
  local _endofopts=0
  local _dpushstat=0
  local _dlogin_id=""
  local _aloginout=0
  local _aloginopt=""
  __docker_is_running || return 111
  eval $(getoptions "f|:=_buildpath" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    --help)
      __docker_help push \
      "${FUNCNAME} [OPTIONS] NAME[:TAG] ..."
      return 0
      ;;
    --)
      _endofopts=1
      ;;
    -*)
      [ ${_endofopts:-0} -eq 0 ] &&
      _dpushopts="${_dpushopts:+$_dpushopts }${_getopt_V:-}" || :
      [ ${_endofopts:-0} -eq 0 ] ||
      _imagekeys="${_imagekeys:+$_imagekeys }${_getopt_V:-}" || :
      ;;
    *)
      _imagekeys="${_imagekeys:+$_imagekeys }${_getopt_V:-}"
      _endofopts=1
      ;;
    esac
  done
  eval $(getoptions_end)
  _pubimages=$(dockerfile-env_PUBLISHED ${_buildpath})
  case "${_pubimages:-}" in
  [Nn][Oo])
    echo "Not subject to PUSH." 1>&2
    return 1
    ;;
  *)
    [ -n "${_imagekeys:-}" ] || {
      _imagekeys=${_pubimages}
    } || :
    [ -n "${_imagekeys:-}" ] || {
      _imagekeys=$(
      dockerfile-imagepath-get ${_buildpath:+-f $_buildpath})
    } || :
    ;;
  esac
  [ -n "${_imagekeys:-}" ] || {
    __docker_help push \
    "${FUNCNAME} [OPTIONS] NAME[:TAG] ..."
    return 2
  } && {
    _dlogin_id=$(docker-login-get-user ${_aloginopt:-})
    for _image_key in ${_imagekeys}
    do
      _imagename=$(container-image-get-path "${_image_key}")
      _imagepath=""
      [ -n "${_imagename}" ] || {
        echo "${FUNCNAME}: Image not found: '${_image_key}'." 1>&2
        continue
      } || :
      case "${_imagename:-}" in
      */*)
        _imagepath="${_imagename}"
        ;;
      *)
        _imagepath="${_dlogin_id:+$_dlogin_id/}${_imagename}"
        docker-tag --untag "${_imagepath}" 1>/dev/null 2>&1 || :
        docker-tag "${_imagename}" "${_imagepath}" &&
        docker-tag --untag "${_imagename}"
        ;;
      esac
      __docker_invoke push ${_dpushopts} "${_imagepath:-}" || {
        _dpushstat=$?
        break
      }
    done
  } || :
  return ${_dpushstat}
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
