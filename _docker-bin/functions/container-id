# container-id

container-get-id() {
  local _container=""
  local _cmnd_opts=""
  local _buildpath=""
  local _printname=0
  local _ps_allids=0
  local _ps_latest=0
  local _ps_last_n=""
  local _find_file=0
  local _find_keys=""
  local _found_cnt=0
  local _searchval=""
  eval $(getoptions \
    "f|file:=_buildpath a|all=_ps_allids l|latest=_ps_latest N|name=_printname n|last:=_ps_last_n" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
      ;;
    *)
      _find_keys="${_find_keys:+${_find_keys} }${_getopt_V}"
      ;;
    esac
  done
  eval $(getoptions_end)
  _buildpath=$(dockerfile-get-path "${_buildpath:-}")
  [ -r "${_buildpath}" -a -z "${_find_keys}" ] && {
    _find_file=1
    _find_keys=$(echo \
      $(dockerfile-env_CONTAINER "${_buildpath}") \
      $(dockerfile-imagetag-get "" "${_buildpath}") \
      "" )
  }
  [ ${_ps_allids} -ne 0 ] &&
  _cmnd_opts="${_cmnd_opts:+${_cmnd_opts} }--all"
  [ ${_ps_latest} -ne 0 ] &&
  _cmnd_opts="${_cmnd_opts:+${_cmnd_opts} }--latest"
  [ -n "${_ps_last_n}" ] &&
  expr "${_ps_last_n}" + 0 1>/dev/null 2>&1 &&
  _cmnd_opts="${_cmnd_opts:+${_cmnd_opts} }-n${_ps_last_n}"
  for _searchval in ${_find_keys}
  do
    _container=""
    [ -n "${_searchval}" ] && {
      _container=$(
        docker ps ${_cmnd_opts} \
        --format='{{ .CreatedAt }};{{.ID}};{{.Image}};{{.Names}}' |
        egrep '(^|[;])'"${_searchval}"'([;].*|$)' |sort -r |
        if [ ${_printname} -eq 0 ]
        then ${AWK} -F ';' '{print($2);}'
        else ${AWK} -F ';' '{print($4);}'
        fi; )
    }
    [ -n "${_container}" ] && {
      echo "${_container}"
      _found_cnt=$(( ${_found_cnt} + 1 ))
      [ ${_find_file} -ne 0 ] && break
    }
  done &&
  [ ${_found_cnt} -gt 0 ]
  return $?
}

# container all ids
container-get-id-all() {
  container-get-id --all "${@}"
  return $?
}

# container latest id
container-get-id-latest() {
  container-get-id --all --latest "${@}"
  return $?
}

# container last id
container-get-id-last() {
  container-get-id --all --last=1 "${@}"
  return $?
}

# container name
container-get-name() {
  container-get-id -N "${@}"
  return $?
}

# container all name
container-get-name-all() {
  container-get-name --all "${@}"
  return $?
}

# container latest name
container-get-name-latest() {
  container-get-name --all --latest "${@}"
  return $?
}

# container last name
container-get-name-last() {
  container-get-name --all --last=1 "${@}"
  return $?
}

# container running
container-is-running() {
  local _container=$(container-get-id-last "${@}")
  [ -n "${_container}" ] && {
    docker ps -a --format="{{ .ID }}" --filter "status=running" |
    egrep '^'"${_container}"'$'
  } 1>/dev/null 2>&1
  return $?
}

# container port
container-get-port() {
  local _container=""
  local _cont_opts=""
  local _find_port=""
  local _portmapln=""
  eval $(getoptions "" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
      _cont_opts="${_cont_opts:+${_cont_opts} }${_getopt_V}"
      ;;
    *)
      echo "${_getopt_V}" |
      egrep '^[1-9][0-9]*$' 1>/dev/null 2>&1
      if [ $? -eq 0 ]
      then _find_port="${_find_port:+${_find_port} }${_getopt_V}"
      else _cont_opts="${_cont_opts:+${_cont_opts} }${_getopt_V}"
      fi
      ;;
    esac
  done
  eval $(getoptions_end)
  _container=$(container-get-id ${_cont_opts})
  [ -n "${_container}" ] && {
    docker port "${_container}" ${_find_port} 2>/dev/null |
    while read _portmapln
    do
      [ -n "${_find_port}" ] &&
      echo "${_portmapln##*:}"
      [ -n "${_find_port}" ] ||
      echo "${_portmapln##*:}" ${_portmapln%->*}
    done |sort -u
  }
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
