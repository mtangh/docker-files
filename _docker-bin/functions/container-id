# container-id

get-container-id() {
  local _container=""
  local _cmnd_opts=""
  local _buildpath=""
  local _ps_allids=0
  local _ps_latest=0
  local _ps_last_n=""
  local _find_file=0
  local _find_keys=""
  local _found_cnt=0
  local _searchval=""
  eval $(getoptions \
    "f|file:=_buildpath a|all=_ps_allids l|latest=_ps_latest n|last:=_ps_last_n" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "$_getopt_V" in
    -*)
      ;;
    *)
      _find_keys=$(echo $_find_keys "$_getopt_V")
      ;;
    esac
  done
  eval $(getoptions_end)
  [ -z "$_buildpath" ] && {
    _buildpath="$(pwd)/Dockerfile"
  }
  [ -r "$_buildpath" -a -z "$_find_keys" ] && {
    _find_file=1
    _find_keys=$(echo \
      $(dockerfile-env-get DOCKER_CONTAINER "$_buildpath") \
      $(dockerfile-env-get DOCKER_IMAGE_TAG "$_buildpath") \
      "" )
  }
  [ $_ps_allids -ne 0 ] &&
  _cmnd_opts="${_cmnd_opts:+$_cmnd_opts }--all"
  [ $_ps_latest -ne 0 ] &&
  _cmnd_opts="${_cmnd_opts:+$_cmnd_opts }--latest"
  [ -n "$_ps_last_n" ] &&
  expr "$_ps_last_n" + 0 1>/dev/null 2>&1 &&
  _cmnd_opts="${_cmnd_opts:+$_cmnd_opts }-n$_ps_last_n"
  for _searchval in $_find_keys
  do
    _container=""
    [ -n "$_searchval" ] && {
      _container=$(
        docker ps $_cmnd_opts --format='{{ .CreatedAt }};{{.ID}};{{.Image}};{{.Names}}' |
        egrep '(^|[;])'"${_searchval}"'([;].*|$)' |
        sort -r |${AWK} -F ';' '{print($2)}')
    }
    [ -n "$_container" ] && {
      echo "$_container"
      _found_cnt=$(( $_found_cnt + 1 ))
      [ $_find_file -ne 0 ] && break
    }
  done
  [ $_found_cnt -gt 0 ]
  return $?
}

# container all ids
get-container-id-all() {
  get-container-id --all $@
  return $?
}

# container latest id
get-container-id-latest() {
  get-container-id --all --latest $@
  return $?
}

# container latest id
get-container-id-last() {
  get-container-id --all --last=1 $@
  return $?
}

# container running
container-is-running() {
  local _container=$(get-container-id-last $@)
  [ -n "$_container" ] && {
    docker ps -a --format="{{ .ID }}" --filter "status=running" |
    egrep '^'"$_container"'$'
  } 1>/dev/null 2>&1
  return $?
}

# container port
get-container-port() {
  local _container=""
  local _cont_opts=""
  local _find_port=""
  local _portmapln=""
  eval $(getoptions "" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "$_getopt_V" in
    -*)
      _cont_opts=$(echo $_cont_opts "$_getopt_V")
      ;;
    *)
      echo "$_getopt_V" |
      egrep '^[1-9][0-9]*$' 1>/dev/null 2>&1
      if [ $? -eq 0 ]
      then _find_port=$(echo $_find_port "$_getopt_V")
      else _cont_opts=$(echo $_cont_opts "$_getopt_V")
      fi
      ;;
    esac
  done
  eval $(getoptions_end)
  _container=$(get-container-id $_cont_opts)
  [ -n "${_container}" ] && {
    docker port "${_container}" $_find_port 2>/dev/null |
    while read _portmapln
    do
      [ -n "$_find_port" ] &&
      echo "${_portmapln##*:}"
      [ -n "$_find_port" ] ||
      echo "${_portmapln##*:}" ${_portmapln%->*}
    done |sort -u
  }
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
