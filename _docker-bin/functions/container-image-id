# container-image

# container image id
container-image-get-id() {
  container-image-get id "$@"
  return $?
}

# container image path(repo:tag)
container-image-get-path() {
  container-image-get path "$@"
  return $?
}

# get container image id or path
container-image-get() {
  local _cimg_type="${1:-}"; shift
  local _cimg_fcls=""
  local _cimg_keys=""
  local _cimagekey=""
  local _found_cnt=0
  local _found_val=""
  local _buildpath=""
  __docker_is_running || return 111
  case "${_cimg_type}" in
  id)   _cimg_fcls='{print($1);}' ;;
  path) _cimg_fcls='{print($2);}' ;;
  *)
    echo "Usage: ${FUNCNAME} {path|id} [-f dockerfile-path] [IMAGE ...]" 1>&2
    return 2
    ;;
  esac
  eval $(getoptions "f|:=_buildpath" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
      ;;
    *)
      _cimg_keys="${_cimg_keys:+${_cimg_keys} }${_getopt_V}"
      ;;
    esac
  done
  eval $(getoptions_end)
  if [ -z "${_cimg_keys}" ]
  then
    _buildpath=$(dockerfile-get-path "${_buildpath:-}") &&
    [ -r "${_buildpath}" ] && {
      for _cimagekey in $(dockerfile-imagepath-get - "${_buildpath}")
      do
        [ -n "${_cimagekey}" ] && {
          _cimg_keys="${_cimg_keys:+${_cimg_keys} }${_cimagekey}"
        }
      done
      _cimagekey=""
    }
  fi 2>/dev/null || :
  [ -n "${_cimg_fcls}" ] &&
  for _cimagekey in ${_cimg_keys}
  do
    _found_val=""
    [ -n "${_cimagekey}" ] &&
    case "${_cimagekey}" in
    -*)
      ;;
    *)
      _found_val=$(
        ${DOCKER_CMD} images --format='{{ .ID}} {{ .Repository }}:{{ .Tag }}' |
        egrep '(^'"${_cimagekey}"'[[:space:]]+|[[:space:]]+'"${_cimagekey}"'(:latest$|$))' |
        egrep -v '[[:space:]]+<none>:<none>$' |${AWK} ${_cimg_fcls} |sort -u 2>/dev/null; )
      [ -n "${_found_val}" ] && {
        echo "${_found_val}"
        _found_cnt=$(( ${_found_cnt} + 1 ))
      }
      ;;
    esac
  done &&
  [ ${_found_cnt} -gt 0 ]
  return $?
}

# get container image config
container-image-get-config() {
  local _cmnd_type="${1:-}"; shift
  local _prop_name=""
  local _propvalue=""
  local _buildpath=""
  local _formatted=0
  local _cimagelst=""
  local _image_key=""
  local _imageuuid=""
  local _cimagecnt=0
  local _inspecter=""
  local _collength=12
  local _dockerret=0
  __docker_is_running || return 111
  case "${_cmnd_type:-}" in
  cmd)
    ;;
  label|property)
    _prop_name="${1:-}"; shift
    [ -n "${_prop_name}" ] || {
      cat <<_USAGE_ 1>&2
Usage: ${FUNCNAME} property name [-f dockerfile-path] [IMAGE ...]
_USAGE_
      return 2
    }
    ;;
  *)
    cat <<_USAGE_ 1>&2
Usage: ${FUNCNAME} cmd [-f dockerfile-path] [IMAGE ...]
       ${FUNCNAME} property name [-f dockerfile-path] [IMAGE ...]
_USAGE_
    return 2
    ;;
  esac
  eval $(getoptions \
    "f|:=_buildpath F|format=_formatted" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "${_getopt_V:=}" in
    -*)
      ;;
    *)
      _cimagelst="${_cimagelst:+${_cimagelst} }${_getopt_V}"
      ;;
    esac
  done
  eval $(getoptions_end)
  [ -n "${_buildpath}" ] &&
  _buildpath=$(dockerfile-get-path "${_buildpath:-}") || :
  [ -z "${_cimagelst}" ] &&
  _cimagelst=$(dockerfile-imagepath-get - "${_buildpath:-}") || :
  [ -n "${_cimagelst}" ] &&
  _cimagecnt=$(echo "${_cimagelst}" |wc -w 2>/dev/null) || :
  [ ${_cimagecnt} -gt 0 ] || {
    return 1
  }
  [ ${_cimagecnt} -le 1 -o ${_formatted} -eq 0 ] || {
    _collength=$(
      for _image_key in ${_cimagelst}
      do echo "${_image_key}"; done |
      __adjustcolwidth "${_collength}")
    printf "%-${_collength}s%s" "IMAGE-REPO:TAG" "${_prop_name:-${_cmnd_type}}"
    echo
  }
  for _image_key in ${_cimagelst}
  do
    _propvalue=""
    _imageuuid=$(container-image-get-id \
    ${_buildpath:+-f ${_buildpath}} "${_image_key}") && {
      case "${_cmnd_type}" in
      label|property)
        _inspecter='{{ index .Config.Labels "'"${_prop_name}"'" }}'
        ;;
      os)
        _inspecter='{{ .Os }}'
        ;;
      arch)
        _inspecter='{{ .Platform }}'
        ;;
      platform)
        _inspecter='{{ .Os }}/{{ .Platform }}'
        ;;
      *)
        _inspecter='{{ .Config.Cmd }}'
        ;;
      esac
      _propvalue=$(
        ${DOCKER_CMD} inspect --type image --format="${_inspecter}" \
        "${_imageuuid}" 2>/dev/null) &&
      if [ ${_cimagecnt} -le 1 ]
      then
        echo "${_propvalue}"
      else
        if [ ${_formatted} -ne 0 ]
        then printf "%-${_collength}s%s" "${_image_key}" "${_propvalue}"
        else printf "%s %s" "${_image_key}" "${_propvalue}"
        fi
        echo
      fi
    } ||
    _dockerret=$?
  done &&
  [ ${_dockerret} -eq 0 ]
  return $?
}

container-image-get-cmd() {
  container-image-get-config cmd "$@"
  return $?
}

container-image-get-property() {
  container-image-get-config property "$@"
  return $?
}

container-image-property_BUILD_OPTS() {
  container-image-get-property "org.ugoole.options.docker.build" "$@"
  return $?
}

container-image-property_RUN_OPTS() {
  container-image-get-property "org.ugoole.options.docker.run" "$@"
  return $?
}

container-image-property_CONTAINER_NAME() {
  container-image-get-property "org.ugoole.docker.run.container-name" "$@"
  return $?
}

container-image-property_RUNNABLE() {
  container-image-get-property "org.ugoole.docker.run.runnable" "$@"
  return $?
}

container-image-property_CONFIRM-STARTUP() {
  container-image-get-property "org.ugoole.docker.run.confirm-startup" "$@"
  return $?
}

container-image-property_IS_TEMPLATE() {
  container-image-get-property "org.ugoole.build.template" "$@"
  return $?
}

container-image-is-runnable() {
  [ -n "$(container-image-get-cmd "$@")" ] && {
    container-image-property_IS_TEMPLATE "$@" |egrep -i '^true$' ||
    container-image-property_RUNNABLE "$@" |egrep -i '^true$'
  } 1>/dev/null 2>&1
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
