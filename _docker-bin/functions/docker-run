# docker-run

# docker run
docker-run() {
  local _imagepath=""
  local _image_tmp=""
  local _stage_key=""
  local _buildpath=""
  local _opts_path=""
  local _drun_opts=""
  local _cmnd_opts=""
  local _endofopts=0
  local _dockerret=0
  if [[ -n "${1:-}" && "${1}" =~ \
     ^[_0-9A-Za-z][-_/0-9A-Za-z]+(:[_0-9A-Za-z][-_/0-9A-Za-z]+$|$) ]]
  then
    _image_tmp=$(container-image-get-path "${1}" 2>/dev/null) &&
    shift
  fi
  eval $(getoptions "|image:=_imagepath f|file:=_buildpath" "$@")
  while getoptions_has_next
  do
    eval $(getoptions_shift 2>/dev/null)
    case "${_getopt_V:=}" in
    --help)
cat <<_USAGE_
Usage: $FUNCNAME [OPTIONS] [+stage-index|@stage-name|IMAGE] [-- [COMMAND] [ARG...]]
_USAGE_
      docker run --help |egrep -v '^Usage' |tail -n +2
      echo
      return 0
      ;;
    --)
      if [ ${_endofopts} -ne 0 ]
      then _endofopts=0
      else _endofopts=1
      fi
      ;;
    -*)
      if [ ${_endofopts} -eq 0 ]
      then _drun_opts="${_drun_opts:+${_drun_opts:-} }${_getopt_V}"
      else _cmnd_opts="${_cmnd_opts:+${_cmnd_opts:-} }${_getopt_V}"
      fi
      ;;
    *)
      if [ ${_endofopts} -eq 0 ]
      then
        case "${_getopt_V:=}" in
        +[0-9]*|@[0-9A-Za-z]*)
          _stage_key="${_getopt_V}"
          ;;
        *)
          _drun_opts="${_drun_opts:+${_drun_opts:-} }${_getopt_V}" || :
          ;;
        esac
      else
        _cmnd_opts="${_cmnd_opts:+${_cmnd_opts:-} }${_getopt_V}"
      fi
      ;;
    esac
  done
  eval $(getoptions_end)
  _buildpath=$(dockerfile-get-path "${_buildpath:-}" 2>/dev/null )
  _imagepath="${_image_tmp:-}"
  [ -n "${_drun_opts}" ] &&
  [[ "${_drun_opts}" =~ ^((..*)[\ ]+|[\ ]*)([^\ -][^\ ]*)$ ]] && {
    _drun_opts="${BASH_REMATCH[2]}"
    [ -n "${BASH_REMATCH[3]}" ] && {
      _imagepath=$(container-image-get-path "${BASH_REMATCH[3]}" 2>/dev/null)
    }
  }
  [ -r "${_buildpath}" -a -z "${_imagepath}" ] && {
    [ -z "${_stage_key}" ] &&
    dockerfile-multi-stage "${_buildpath}" 1>/dev/null 2>&1 && {
      echo "Choose a stage to run."
      echo
      dockerfile-stage-list -FI "${_buildpath}" 2>/dev/null
      echo
      return 1
    } || :
    _imagepath=$(
      if [ -n "${_stage_key}" ]
      then dockerfile-imagepath-get "${_stage_key}" "${_buildpath}"
      else dockerfile-env_IMAGEPATH "${_buildpath}" ||
           dockerfile-imagepath-from-dir "${_buildpath}"
      fi 2>/dev/null; )
  } || :
  [ -z "${_drun_opts}" ] &&
  _drun_opts=$(dockerfile-env_BOOT_OPTS "${_buildpath}") || :
  [ -n "${_imagepath}" -a -z "${_drun_opts}" ] &&
  _drun_opts=$(container-image-property_RUN_OPTS "${_imagepath}") || :
# [ -z "${_cmnd_opts}" ] &&
# _cmnd_opts="/bin/bash" || :
  if [ -n "${_imagepath}" ]
  then
    echo docker run ${_drun_opts} ${_imagepath} ${_cmnd_opts} &&
    eval $(echo docker run ${_drun_opts} ${_imagepath} ${_cmnd_opts})
    _dockerret=$?
  else
    docker run --help; echo; _dockerret=1
  fi
  return ${_dockerret}
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
