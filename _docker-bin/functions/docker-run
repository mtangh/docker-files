# docker-run

# docker run
docker-run() {
  local _imagepath=""
  local _image_tmp=""
  local _stage_key=""
  local _buildpath=""
  local _opts_path=""
  local _dcmd_opts=()
  local _cmnd_args=()
  local _opts_type=""
  local _endofopts=0
  local _dockerret=0
  eval $(getoptions "|image:=_imagepath f|file:=_buildpath" "$@")
  while getoptions_has_next
  do
    [ ${_endofopts} -eq 0 ] &&
    _opts_type="r" ||
    _opts_type="c" || :
    eval $(getoptions_shift 2>/dev/null)
    case "${_getopt_V:=}" in
    --help)
cat <<_USAGE_
Usage: $FUNCNAME [OPTIONS] [+stage-index|@stage-name|IMAGE] [[--] [COMMAND] [ARG...]]
_USAGE_
      docker run --help |egrep -v '^Usage' |tail -n +2
      echo
      return 0
      ;;
    --)
      [ ${_endofopts} -eq 0 ] && {
        _opts_type=""
        _endofopts=1
      } || :
      ;;
    -*)
      ;;
    +[0-9]*|@[0-9A-Za-z]*)
      [ ${_endofopts} -eq 0 ] && {
        _stage_key="${_getopt_V}"
        _opta_type=""
        _endofopts=1
      } || :
      ;;
    *)
      if [ ${_endofopts} -eq 0 -a -z "${_imagepath}" ]
      then
        _imagepath=$(
          container-image-get-id "${_getopt_V}" 2>/dev/null |
          head -n1) ||
        [ -n "${_imagepath}" ] && {
          _opts_type=""
          _endofopts=1
        } || :
      fi
      ;;
    esac
    case "${_opts_type:-}" in
    r)
      [ -n "${_dcmd_opts[@]}" ] &&
      _dcmd_opts=("${_dcmd_opts[@]}" "${_getopt_V}") ||
      _dcmd_opts=("${_getopt_V}") || :
      ;;
    c)
      [ -n "${_cmnd_args[@]}" ] &&
      _cmnd_args=("${_cmnd_args[@]}" "${_getopt_V}") ||
      _cmnd_args=("${_getopt_V}") || :
      ;;
    *)
      ;;
    esac    
  done
  eval $(getoptions_end)
  [ -z "${_imagepath}" ] && {
    _buildpath=$(dockerfile-get-path "${_buildpath:-}")
  } 2>/dev/null || :
  if [ -r "${_buildpath}" -a -z "${_imagepath}" ]
  then
    [ -z "${_stage_key}" ] &&
    dockerfile-multi-stage "${_buildpath}" 1>/dev/null 2>&1 && {
      echo "Choose a stage to run."
      echo
      dockerfile-stage-list -FI "${_buildpath}" 2>/dev/null
      echo
      return 1
    } || :
    _imagepath=$(
    dockerfile-imagepath-get \
    "${_stage_key:-+0}" "${_buildpath}" 2>/dev/null)
  fi
  [ -z "$(echo ${_dcmd_opts[@]})" ] &&
  _dcmd_opts=$(dockerfile-env_BOOT_OPTS "${_buildpath}") || :
  [ -n "${_imagepath}" -a -z "$(echo ${_dcmd_opts[@]})" ] &&
  _dcmd_opts=$(container-image-property_RUN_OPTS "${_imagepath}") || :
  [ -z "${_imagepath}" ] && {
    docker run --help
    echo
    return 1
  } || :
  echo docker run ${_dcmd_opts[@]} ${_imagepath} ${_cmnd_args[@]} &&
  eval $(echo docker run ${_dcmd_opts[@]} ${_imagepath} ${_cmnd_args[@]})
  return $?
}

# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
